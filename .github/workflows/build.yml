name: build-pipeline
on:
  push:
    branches:
      - master
      - v*
      - gitlab*

jobs:
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      graphql-server: ${{ steps.filter.outputs.graphql-server }}
      authentication: ${{ steps.filter.outputs.authentication }}
      event-tracker: ${{ steps.filter.outputs.event-tracker }}
      subscriber: ${{ steps.filter.outputs.subscriber }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'litmus-portal/frontend/**'
            graphql-server:
              - 'litmus-portal/graphql-server/**'
            authentication:
              - 'litmus-portal/authentication/**'
            event-tracker:
              - 'litmus-portal/cluster-agents/event-tracker/**'
            subscriber:
              - 'litmus-portal/cluster-agents/subscriber/**'

  backend-checks:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.graphql-server == 'true'  || needs.changes.outputs.authentication == 'true' || needs.changes.outputs.event-tracker == 'true' || needs.changes.outputs.subscriber == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Check Golang imports order
        uses: Jerome1337/goimports-action@v1.0.3
        with:
          goimports-path: ./litmus-portal
      - shell: bash
        run: |
          cd litmus-portal
          make backend-services-checks

  frontend-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Frontend checks
        shell: bash
        run: |
          cd litmus-portal
          make frontend-services-checks


  get-envs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: |
          img_tag="ci"
          # This is a condition where image tag looks like "pull/<pullrequest-name>" during pull request build
          NEW_IMG_TAG=`echo $img_tag | sed "s/\//-/g"`
          echo $NEW_IMG_TAG
          echo export IMG_TAG=$NEW_IMG_TAG >> env-vars
          echo export GRAPHQL_SERVER_IMAGE="litmusportal-server" >> env-vars
          echo export AUTHENTICATION_SERVER_IMAGE="litmusportal-auth-server" >> env-vars
          echo export FRONTEND_IMAGE="litmusportal-frontend" >> env-vars
          echo export SUBSCRIBER_IMAGE="litmusportal-subscriber" >> env-vars
          echo export EVENT_TRACKER="litmusportal-event-tracker" >> env-vars
          pwd
          ls -lart
      - name: Uploading envs
        uses: actions/upload-artifact@v2
        with:
          name: env_artifact
          path: litmus-portal/env-vars

  docker-build-and-push-frontend:
    runs-on: ubuntu-latest
    needs:
      - get-envs
      - frontend-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Downloading image artficate
        uses: actions/download-artifact@v2
        with:
          name: env_artifact
          path: litmus-portal

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push frontend docker image
        env:
          FRONTEND_IMAGE: ${FRONTEND_IMAGE}
          IMG_TAG: ${IMG_TAG}
          PLATFORMS: ${{ secrets.PLATFORMS }}
          REPONAME: ${{ secrets.REPONAME }}         
          timestamp: ${timestamp}         
        run: |
          source env-vars
          timestamp=`date "+%s"`
          make push-frontend
